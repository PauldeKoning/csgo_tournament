/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <cstrike>
#include <sdktools_functions>


//SERVER VARS
int ServerID = 1;
int GameID;
int MatchID;
new String:Map[32];
int GameStarted;
//DATABASE VARS
Database db;
//PLAYER/TEAMS VARS
int PlayersJoined;
int PlayersReady;
int PlayersNeeded;
int Players[10][3]; //userid, teamid, ready
int Teams[2][5]; //teamid, teamside(3 = CT, 2 = T), score, won, wonThis
char TeamNames[2][32];
int WonWith;

public Plugin:myinfo = 
{
	name = "New Plugin",
	author = "Unknown",
	description = "<- Description ->",
	version = "1.0",
	url = "<- URL ->"
}

public OnPluginStart() {
	initializeServer();
	
	PrintToServer("Game Controller Initialized");
}

public OnMapStart() {
	ServerCommand("exec esl5v5.cfg");
	ServerCommand("mp_warmup_start");
	ServerCommand("mp_warmuptime 3540");
}

public OnClientPutInServer(client) {
	if(GameID == 0) {
		if(getGameId()) {
			initializeTeams();
			getPlayerNeededAmount();
			changeToGameMap();
			initializeMatchScores();
			setTeamNames();
		} else {
			KickClient(client);
			return;
		}
	}
	
	char authid[32];
	GetClientAuthId(client, AuthId_SteamID64, authid, sizeof(authid));
	
	if(!isPlayerJoinable(authid)) {
		KickClient(client);
		return;
	}
	
	if(isPlayerInitialized(authid)) {
		rejoinClient(authid, client);
	} else {
		initializeClient(authid, client);
	}
}

public OnClientSayCommand_Post(int client, const char[] command, const char[] sArgs) {
	
	char authid[32];
	GetClientAuthId(client, AuthId_SteamID64, authid, sizeof(authid));
	
	if(StrEqual(sArgs, ".ready")) {
		commandReadyController(authid, client);
	}
	
	if(StrEqual(sArgs, ".timeout")) {
		commandTimeoutController(client);
	}
}

public commandReadyController(char[] authid, client) {
	if(!isPlayerReady(authid)) {
		setPlayerReady(authid);
		
		new String:playersReady[3], String:playersNeeded[3], String:clientName[32];
		
		IntToString(PlayersReady, playersReady, sizeof(playersReady));
		IntToString(PlayersNeeded, playersNeeded, sizeof(playersNeeded));
		
		GetClientName(client, clientName, sizeof(clientName));
		
		PrintToChatAll("\x01 \x06Player '%s' is ready (%s/%s)", clientName, playersReady, playersNeeded);
		
		checkAllPlayersReady();
	}
}

public OnClientDisconnect(client) {
	int userid = GetClientUserId(client);
	for(int i = 0; i < sizeof(Players); i++) {
		if(Players[i][0] == userid) {
			Players[i][0] = 0;
		}
	}
}


public initializeServer() {
	char error[255];
	db = SQL_DefConnect(error, sizeof(error));
	if (db == null) {
		PrintToServer("Could not connect: %s", error);
	} else {
		PrintToServer("Connected to default database");
	}
	
	HookEvent("round_end", onRoundEnd, EventHookMode_PostNoCopy);
	HookEvent("server_shutdown", onServerShutdown, EventHookMode_PostNoCopy);
}

public initializeClient(char[] authid, client) {
	int teamid;
	new String:queryString[320], String:gameIDString[8];
	queryString = "select players.teamid from games inner join startsides on games.gameid = startsides.gameid inner join teams on startsides.teamid = teams.teamid inner join players on teams.teamid = players.teamid where games.gameid = %g and players.steamid = '%s';";
	ReplaceString(queryString, sizeof(queryString), "%s", authid);
	IntToString(GameID, gameIDString, sizeof(gameIDString));
	ReplaceString(queryString, sizeof(queryString), "%g", gameIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if(SQL_FetchRow(query)) {
		teamid = SQL_FetchInt(query, 0);
	} else {
		KickClient(client);
	}
	delete query;
	
	addPlayer(authid, GetClientUserId(client), teamid);
	
	setPlayerName(authid, client);
}

public addPlayer(char[] authid, clientid, teamid) {	
	if(PlayersJoined == PlayersNeeded) return;
	addPlayerAuthID(PlayersJoined, authid);
	Players[PlayersJoined][0] = clientid;
	Players[PlayersJoined][1] = teamid;
	
	PlayersJoined++;
}

public setPlayerName(char[] authid, client) {
	new String:queryString[320], String:gameIDString[8], String:playerName[32];
	queryString = "select players.playername from games inner join startsides on games.gameid = startsides.gameid inner join teams on startsides.teamid = teams.teamid inner join players on teams.teamid = players.teamid where games.gameid = %g and players.steamid = '%s';";
	ReplaceString(queryString, sizeof(queryString), "%s", authid);
	IntToString(GameID, gameIDString, sizeof(gameIDString));
	ReplaceString(queryString, sizeof(queryString), "%g", gameIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if(SQL_FetchRow(query)) {
		SQL_FetchString(query, 0, playerName, sizeof(playerName));
	}
	delete query;
	
	SetClientName(client, playerName);
	
	PrintToChatAll("\x01 \x06Player '%s' joined the server", playerName);
}

public changeToGameMap() {
	new String:changeMapBuffer[128];
	changeMapBuffer = "changelevel %m";
	ReplaceString(changeMapBuffer, sizeof(changeMapBuffer), "%m", Map);
	ServerCommand(changeMapBuffer);
}

public bool isPlayerJoinable(char[] authid) {
	new String:queryString[320], String:gameIDString[8];
	queryString = "select players.steamid from games inner join startsides on games.gameid = startsides.gameid inner join teams on startsides.teamid = teams.teamid inner join players on teams.teamid = players.teamid where games.gameid = %g and players.steamid = '%s';";
	ReplaceString(queryString, sizeof(queryString), "%s", authid);
	IntToString(GameID, gameIDString, sizeof(gameIDString));
	ReplaceString(queryString, sizeof(queryString), "%g", gameIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if(SQL_FetchRow(query)) {
		delete query;
		return true;
	} else {
		delete query;
		return false;
	}
}

public bool isPlayerInitialized(char[] authid) {
	for(int i = 0; i < sizeof(Players); i++) {
		new String:buffer1[32];
		getPlayerAuthID(i, buffer1, sizeof(buffer1));
		if(StrEqual(buffer1, authid)) {
			return true;
		}
	}
	return false;
}

public bool isPlayerReady(char[] authid) {
	for(int i = 0; i < sizeof(Players); i++) {
		new String:buffer1[32];
		getPlayerAuthID(i, buffer1, sizeof(buffer1));
		if(StrEqual(buffer1, authid) && Players[i][2] == 1) {
			return true;
		}
	}
	return false;
}

public setPlayerReady(char[] authid) {
	for(int i = 0; i < sizeof(Players); i++) {
		new String:buffer1[32];
		getPlayerAuthID(i, buffer1, sizeof(buffer1));
		if(StrEqual(buffer1, authid)) {
			Players[i][2] = 1;
			PlayersReady++;
			return;
		}
	}
}

public rejoinClient(char[] authid, client) {
	for(int i = 0; i < sizeof(Players); i++) {
		new String:buffer1[32];
		getPlayerAuthID(i, buffer1, sizeof(buffer1));
		if(StrEqual(buffer1, authid)) {
			Players[i][0] = GetClientUserId(client);
			setPlayerName(authid, client);
			return;
		}
	}
}

public checkAllPlayersReady() {
	if(PlayersReady == PlayersNeeded) {
		startGame();
	}
}

//TODO SEPERATE TEAM NAME AND STARTSIDE AND WON/WONWITH MAKE SURE TEAM NAME STAYS AT SWITCH
public initializeTeams() {
	new String:queryString[400], String:gameIDString[8];
	queryString = "select teams.teamid, startside, teamname from games inner join matches on games.matchid = matches.matchid inner join startsides on games.gameid = startsides.gameid inner join teams on startsides.teamid = teams.teamid where games.gameid = %s;";
	IntToString(GameID, gameIDString, sizeof(gameIDString));
	ReplaceString(queryString, sizeof(queryString), "%s", gameIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if (query == null) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	} else {
		new String:team1Name[32], String:team2Name[32];
		int counter = 0;
		
		while(SQL_FetchRow(query)) {
			new String:buffer1[10], String:buffer2[10];
			IntToString(SQL_FetchInt(query, 0), buffer1, sizeof(buffer1));
			IntToString(SQL_FetchInt(query, 1), buffer2, sizeof(buffer2));
			PrintToChatAll("TEST2 %s TEST3 %s", buffer1, buffer2);
			if(counter == 0) {
				int team1Id = SQL_FetchInt(query, 0);
				Teams[0][0] = team1Id;
				int team1Int = SQL_FetchInt(query, 1);
				Teams[0][1] = team1Int;
				
				SQL_FetchString(query, 2, team1Name, sizeof(team1Name));
				TeamNames[0] = team1Name;
			}
			if(counter == 1) {
				int team2Id = SQL_FetchInt(query, 0);
				Teams[1][0] = team2Id;
				int team2Int = SQL_FetchInt(query, 1);
				Teams[1][1] = team2Int;
				
				SQL_FetchString(query, 2, team2Name, sizeof(team2Name));
				TeamNames[1] = team2Name;
			}
			counter++;
		}
		delete query;
	}
}

public setTeamNames() {
	new String:team1String[128], String:team2String[128];
	team1String = "mp_teamname_1 %s";
	team2String = "mp_teamname_2 %s";
	for(int i = 0; i < sizeof(Teams); i++) {
		if(Teams[i][0] != 0) {
			if(Teams[i][1] == 3) {
				ServerCommand(team1String, TeamNames[i]);
			}
			if(Teams[i][1] == 2) {
				ServerCommand(team2String, TeamNames[i]);
			}
		}
	}
}

public initializeMatchScores() {
	new String:queryString[400], String:matchIDString[8];
	queryString = "select teamid, sum(won), wonwith from games inner join matches on games.matchid = matches.matchid inner join startsides on games.gameid = startsides.gameid where matches.matchid = %m group by teamid;";
	IntToString(MatchID, matchIDString, sizeof(matchIDString));
	ReplaceString(queryString, sizeof(queryString), "%m", matchIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if (query == null) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	} else {		
		while(SQL_FetchRow(query)) {
			for(int i = 0; i < sizeof(Teams); i++) {
				if(Teams[i][0] == SQL_FetchInt(query, 0)) {
					Teams[i][3] = SQL_FetchInt(query, 1);
				}
			}
			
			WonWith = SQL_FetchInt(query, 2);
		}
		delete query;
	}
}


//GETTERS (DB)

public getPlayerAuthID(int index, char[] buffer, int maxLength) {
	new String:queryString[120], String:serverIDString[8], String:indexBuffer[4];
	queryString = "select steamid from joinedplayers where joinedplayers.index = %i and serverid = %s;";
	IntToString(ServerID, serverIDString, sizeof(serverIDString));
	ReplaceString(queryString, sizeof(queryString), "%s", serverIDString);
	IntToString(index, indexBuffer, sizeof(indexBuffer));
	ReplaceString(queryString, sizeof(queryString), "%i", indexBuffer);
	
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if (query == null) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	}
	
	new String:resultBuffer[32];
	if(SQL_FetchRow(query)) {
		SQL_FetchString(query, 0, resultBuffer, sizeof(resultBuffer));
	}
	
	strcopy(buffer, maxLength, resultBuffer);
	delete query;
}

public addPlayerAuthID(int index, char[] authid) {
	new String:queryString[360], String:serverIDString[8], String:indexBuffer[4];
	queryString = "insert into joinedplayers values (%s, %i, '%d');";
	IntToString(ServerID, serverIDString, sizeof(serverIDString));
	ReplaceString(queryString, sizeof(queryString), "%s", serverIDString);
	IntToString(index, indexBuffer, sizeof(indexBuffer));
	ReplaceString(queryString, sizeof(queryString), "%i", indexBuffer);
	ReplaceString(queryString, sizeof(queryString), "%d", authid);
	if (!SQL_FastQuery(db, queryString)) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	}
}

public setPlayerAuthID(int index, char[] authid) {
	new String:queryString[360], String:serverIDString[8], String:indexBuffer[4];
	queryString = "update joinedplayers set steamid = '%d' where serverid = %s and index = %i;";
	IntToString(ServerID, serverIDString, sizeof(serverIDString));
	ReplaceString(queryString, sizeof(queryString), "%s", serverIDString);
	IntToString(index, indexBuffer, sizeof(indexBuffer));
	ReplaceString(queryString, sizeof(queryString), "%i", indexBuffer);
	ReplaceString(queryString, sizeof(queryString), "%d", authid);
	if (!SQL_FastQuery(db, queryString)) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	}
}

public bool getGameId() {
	new String:queryString[360], String:serverIDString[8];
	queryString = "select gameid, games.matchid, map from servers inner join games on servers.serverid = games.serverid inner join matches on games.matchid = matches.matchid WHERE played = 0 AND completed = 0 AND servers.serverid = %s order by datetime asc limit 1;";
	IntToString(ServerID, serverIDString, sizeof(serverIDString));
	ReplaceString(queryString, sizeof(queryString), "%s", serverIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if (query == null) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	} else {

		if(SQL_FetchRow(query)) {
			GameID = SQL_FetchInt(query, 0);
			MatchID = SQL_FetchInt(query, 1);
			SQL_FetchString(query, 2, Map, sizeof(Map));
			return true;
		}
		delete query;
	}
	return false;
}

public bool getPlayerNeededAmount() {
	new String:queryString[320], String:gameIDString[8];
	queryString = "select count(playername) as playerAmount from games inner join startsides on games.gameid = startsides.gameid inner join teams on startsides.teamid = teams.teamid inner join players on teams.teamid = players.teamid where games.gameid = %g;";
	IntToString(GameID, gameIDString, sizeof(gameIDString));
	ReplaceString(queryString, sizeof(queryString), "%g", gameIDString);
	DBResultSet query = SQL_Query(db, queryString, sizeof(queryString));
	
	if (query == null) {
		new String:error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	} 
	else {	
		if(SQL_FetchRow(query)) {
			PlayersNeeded = SQL_FetchInt(query, 0);
		}
		delete query;
	}
}

//FROM HERE ON IS GAME RELATED
public startGame() { //start the game
	
	switchPlayersToSide();
	
	GameStarted = 1;
	
	ServerCommand("mp_warmup_end;");
	ServerCommand("mp_restartgame 1;");
	ServerCommand("mp_restartgame 1;");
	ServerCommand("mp_restartgame 1;");
	
	HookEvent("cs_win_panel_match", onGameEnd, EventHookMode_PostNoCopy);
}

public switchPlayersToSide() {
	for(int i = 0; i < sizeof(Players); i++) {
		new String:buffer1[32];
		getPlayerAuthID(i, buffer1, sizeof(buffer1));
		if(!StrEqual(buffer1, "")) {
			for(int x = 0; x < sizeof(Teams); x++) {
				if(Players[i][1] == Teams[x][0]) {
					CS_SwitchTeam(GetClientOfUserId(Players[i][0]), Teams[x][1]);
				}
			}
		}
	}
}

public onRoundEnd(Event event, const char[] name, bool dontBroadcast) {
	if(GameStarted == 0) {
		ServerCommand("mp_warmup_start");
		ServerCommand("mp_warmuptime 3540");
		return;
	}
	
	new String:team1Score[4], String:team2Score[4];
	for(int i = 0; i < sizeof(Teams); i++) {
		Teams[i][2] = CS_GetTeamScore(Teams[i][1])
	}
	
	int totalRounds = Teams[0][2] + Teams[1][2];
	int halfTime;
	if(totalRounds > 30) {
		if(totalRounds == 3) halfTime = 1;
		if((totalRounds - 3) % 6 == 0) halfTime = 1;
	}
	if(totalRounds == 15) halfTime = 1;
	
	if(halfTime == 1) {
		setHalfTimeTeamChange();
	}
	
	switchPlayersToSide();
	
	setCurrentTeamScore();
	
	setTeamNames();
	
	IntToString(Teams[0][2], team1Score, sizeof(team1Score));
	IntToString(Teams[1][2], team2Score, sizeof(team2Score));
	
	if(WonWith > 1) {
		new String:team1Won[4], String:team2Won[4], String:wonWith[4];
		IntToString(Teams[0][3], team1Won, sizeof(team1Won));
		IntToString(Teams[1][3], team2Won, sizeof(team2Won));
		IntToString(WonWith, wonWith, sizeof(wonWith));
		PrintToChatAll("\x01 \x06[%s/%s] %s [%s-%s] %s [%s/%s]", team1Won, wonWith, TeamNames[0], team1Score, team2Score, TeamNames[1], team2Won, wonWith);
		return;
	}
	
	PrintToChatAll("\x01 \x06%s [%s-%s] %s", TeamNames[0], team1Score, team2Score, TeamNames[1]);
}

public setHalfTimeTeamChange() {
	for(int x = 0; x < sizeof(Teams); x++) {
		if(Teams[x][1] == 2) {
			Teams[x][1] = 3;
		} else {
			Teams[x][1] = 2
		}
	}
}

public setCurrentTeamScore() {
	for(int x = 0; x < sizeof(Teams); x++) {
		Teams[x][2] = CS_GetTeamScore(Teams[x][1]);
	}
}

public onGameEnd(Event event, const char[] name, bool dontBroadcast) {
	setEndScore();
	
	setGamePlayed();
	
	removeAllPlayersFromServerDB();
	
	for(int i = 0; i < sizeof(Players); i++) {
		if(Players[i][0] != 0) {
			KickClient(GetClientOfUserId(Players[i][0]));
		}
	}
	ServerCommand("sm plugins reload GameController");
	return;
}

public setEndScore() {
	if(Teams[0][2] > Teams[1][2]) {
		Teams[0][4] = 1;
	} else {
		Teams[1][4] = 1;
	}
	
	for(int i = 0; i < sizeof(Teams); i++) {
		new String:queryString[360], String:gameID[8], String:teamID[4], String:teamWonThis[4], String:teamScore[4];
		queryString = "update startsides set won = %w, score = %s where gameid = %g and teamid = %t;";
		IntToString(GameID, gameID, sizeof(gameID));
		ReplaceString(queryString, sizeof(queryString), "%g", gameID);
		IntToString(Teams[i][0], teamID, sizeof(teamID));
		ReplaceString(queryString, sizeof(queryString), "%t", teamID);
		IntToString(Teams[i][4], teamWonThis, sizeof(teamWonThis));
		ReplaceString(queryString, sizeof(queryString), "%w", teamWonThis);
		IntToString(Teams[i][2], teamScore, sizeof(teamScore));
		ReplaceString(queryString, sizeof(queryString), "%s", teamScore);
		if (!SQL_FastQuery(db, queryString)) {
			char error[255];
			SQL_GetError(db, error, sizeof(error));
			PrintToServer("Failed to query (error: %s)", error);
		}
	}
}

public setGamePlayed() {
	new String:queryString[360], String:gameID[8], String:serverID[4];
	queryString = "update games set played = 1 where gameid = %g and serverid = %s;";
	IntToString(GameID, gameID, sizeof(gameID));
	ReplaceString(queryString, sizeof(queryString), "%g", gameID);
	IntToString(ServerID, serverID, sizeof(serverID));
	ReplaceString(queryString, sizeof(queryString), "%s", serverID);
	if (!SQL_FastQuery(db, queryString)) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	}
}

public commandTimeoutController(client) {
	int userid = GetClientUserId(client);
	
	for(int i = 0; i < sizeof(Players); i++) {
		if(Players[i][0] == userid) {
			
			for(int x = 0; x < sizeof(Teams); x++) {
				if(Players[i][1] == Teams[x][0]) {
					if(Teams[x][1] == 3) {
						//3
						ServerCommand("timeout_ct_start");
					}
					if(Teams[x][1] == 2) {
						//2
						ServerCommand("timeout_terrorist_start");
					}
				}
			}
			
			return;
		}
	}
}

public removeAllPlayersFromServerDB() {
	new String:queryString[120], String:serverIDString[8];
	queryString = "delete from joinedplayers where serverid = %s;";
	IntToString(ServerID, serverIDString, sizeof(serverIDString));
	ReplaceString(queryString, sizeof(queryString), "%s", serverIDString);
	if (!SQL_FastQuery(db, queryString)) {
		char error[255];
		SQL_GetError(db, error, sizeof(error));
		PrintToServer("Failed to query (error: %s)", error);
	}
}

public onServerShutdown(Event event, const char[] name, bool dontBroadcast) {
	removeAllPlayersFromServerDB();
}

